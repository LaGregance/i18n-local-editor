import { EDITOR_CONFIG } from '@/i18n/config';
import * as fs from 'node:fs';
import { format } from 'prettier';
import { deleteObjectValueAtPath, setObjectValueAtPath } from '@/shared/utils';
import path from 'node:path';

export abstract class I18nManager {
  static resolveFilePath(locale: string, namespace: string) {
    return path.join(
      process.cwd(),
      EDITOR_CONFIG.pathToFiles.replace('{{locale}}', locale).replace('{{ns}}', namespace)
    );
  }

  static loadFile(filePath: string) {
    // TODO: Manage non JSON files
    return JSON.parse(fs.readFileSync(filePath, { encoding: 'utf8' }));
  }

  static saveFile(filePath: string, content: any) {
    // TODO: Manage non JSON files
    fs.writeFileSync(filePath, JSON.stringify(content, null, 4), { encoding: 'utf8' });
  }

  static async buildKeyFile() {
    const keys: string[] = [];

    for (const locale of EDITOR_CONFIG.locales) {
      for (const namespace of EDITOR_CONFIG.namespaces) {
        const filePath = this.resolveFilePath(locale, namespace);
        const translations = this.flattenTranslations(this.loadFile(filePath));

        for (const key of Object.keys(translations)) {
          const fullKey = namespace + ':' + key;
          if (!keys.includes(fullKey)) {
            keys.push(fullKey);
          }
        }
      }
    }

    const content = `// This file is auto-generated by the build script

      export type TrKeys =
        ${keys
          .map(
            (key) => `/**
        * http://localhost:25560?key=${encodeURI(key)}
        */
        | '${key}'`
          )
          .join('\n')};
      
      export const trKeys = (key: TrKeys) => key;`;

    await format(content, { parser: 'typescript' });
    fs.writeFileSync(path.join(process.cwd(), EDITOR_CONFIG.keyFile), await format(content, { parser: 'typescript' }), {
      encoding: 'utf8',
    });
  }

  /**
   * Take a JS object of key/value pair that contain nested object and flatten it
   * @param translations
   * @param prefix
   * @param result
   */
  private static flattenTranslations(translations: any, prefix = '', result: any = {}) {
    for (const key of Object.keys(translations)) {
      if (typeof translations[key] === 'object') {
        this.flattenTranslations(translations[key], prefix + key + '.', result);
      } else {
        result[prefix + key] = translations[key];
      }
    }

    return result;
  }

  /**
   * Load translations in format { key: { [locale]: value } }
   *
   * @param locales
   * @param namespaces
   */
  static loadTranslations(locales: string[], namespaces: string[]) {
    const result: any = {};

    for (const locale of locales) {
      for (const namespace of namespaces) {
        const filePath = this.resolveFilePath(locale, namespace);
        const translations = this.flattenTranslations(this.loadFile(filePath));

        for (const key of Object.keys(translations)) {
          result[namespace + ':' + key] ??= {};
          result[namespace + ':' + key][locale] = translations[key];
        }
      }
    }

    return result;
  }

  static setValue(keyWithNamespace: string, value: any) {
    const splitted = keyWithNamespace.split(':');
    const namespace = splitted[0];
    const key = splitted[1];

    if (!namespace || !key) {
      throw new Error('Invalid key');
    } else if (!EDITOR_CONFIG.namespaces.includes(namespace)) {
      throw new Error('Unknown namespace');
    }

    const locales = value ? Object.keys(value) : EDITOR_CONFIG.locales;

    for (const locale of locales) {
      if (!EDITOR_CONFIG.locales.includes(locale)) {
        throw new Error(`Unknown locale ${locale}`);
      }
      const filePath = this.resolveFilePath(locale, namespace);
      const content = this.loadFile(filePath);
      if (!value || !value[locale]) {
        deleteObjectValueAtPath(content, key);
      } else {
        setObjectValueAtPath(content, key, value[locale]);
      }
      this.saveFile(filePath, content);
    }
  }
}
